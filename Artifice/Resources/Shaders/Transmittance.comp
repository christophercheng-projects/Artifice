#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32


#define R_PLANET 6360e3
#define R_ATMOSPHERE 6440e3
#define TRANSMITTANCE_STEPS 50
#define H_M 1200
#define H_R 8000

#define BETA_R vec3(5.8e-6, 1.35e-5, 3.31e-5)
#define BETA_E_R BETA_R
#define BETA_M vec3(2e-6)
#define BETA_E_M vec3(1.11 * BETA_M)
#define BETA_O vec3(5.09, 7.635, 0.2545)


layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16f) uniform writeonly image2D table;

const float infinity = 1. / 0.;

float ray_circle(vec2 start, vec2 dir, float radius, bool nearest)
{
    float c = dot(start, start) - (radius*radius);
    float b = dot(dir, start);
    float d = b*b - c;
    if (d < 0.0) return infinity;
    float t0 = -b - sqrt(d);
    float t1 = -b + sqrt(d);
    float ta = min(t0, t1);
    float tb = max(t0, t1);
    if (tb < 0.0) { return infinity; }
    else if (nearest) { return ta > 0.0 ? ta : tb; }
    else { return tb; }
}

float coord_to_height(float x)
{
    float h_atmosphere = R_ATMOSPHERE - R_PLANET;
    return max(x * x * h_atmosphere, 1);
}
float coord_to_cos_view(float height, float y)
{
    const float c_h = -sqrt(height * (2 * R_PLANET + height)) / (R_PLANET + height);
    float result;
    if (y > 0.5) {
        result = c_h + pow(2*y - 1, 5) * (1 - c_h);
    } else {
        result = c_h - pow(2*(0.5 - y), 5) * (1 + c_h);
    }
    return clamp(result, -1, 1);
}

vec2 cos_view_dir(float cos_view)
{
    // Rotates vec2(1, 0) by view. Integration always begins at a point with zenith vec2(1, 0), so
    // this extracts the correct outgoing ray direction based on the parameterizations around such a
    // starting point.
    return vec2(cos_view, sqrt(1 - cos_view * cos_view));
}

// Precompute transmittance to a point at a certain altitude along a ray towards the atmosphere
void main() {
    float height = coord_to_height(gl_GlobalInvocationID.x / float(gl_NumWorkGroups.x * WORKGROUP_SIZE - 1));
    float cos_view = coord_to_cos_view(height, gl_GlobalInvocationID.y / float(gl_NumWorkGroups.y * WORKGROUP_SIZE - 1));

    vec2 p_a = vec2(height + R_PLANET, 0);
    vec2 dir = cos_view_dir(cos_view);
    // If intersects planet, return
    if (!isinf(ray_circle(p_a, dir, R_PLANET, true))) {
        imageStore(table, ivec2(gl_GlobalInvocationID.xy), vec4(0, 0, 0, 1));
        return;
    }
    // Find length of vector from p_a to atmosphere in direction dir
    float t = ray_circle(p_a, dir, R_ATMOSPHERE, false);
    // If does not intersect atmosphere, return
    if (isinf(t)) {
        imageStore(table, ivec2(gl_GlobalInvocationID.xy), vec4(1, 1, 1, 1));
        return;
    }
    // p_b is point of intersection on atmosphere
    vec2 p_b = p_a + t * dir;

    float dx = distance(p_a, p_b) / TRANSMITTANCE_STEPS;
    float prev_density_m = 0;
    float prev_density_r = 0;
    float prev_density_o = 0;
    float total_density_m = 0;
    float total_density_r = 0;
    float total_density_o = 0;
    // trapezoidal approxamation integration
    for (int step = 0; step < TRANSMITTANCE_STEPS; ++step) {
        vec2 p_x = p_a + dx * step * dir;
        // h is altitude
        float h = length(p_x) - R_PLANET;
        // densities
        float density_m = exp(-h/H_M);
        float density_r = exp(-h/H_R);
        float density_o = 6e-7 * density_r;
        // trapezoidal summation
        total_density_m += dx * (density_m + prev_density_m) / 2;
        total_density_r += dx * (density_r + prev_density_r) / 2;
        total_density_o += dx * (density_o + prev_density_o) / 2;
        // store as previous for trapezoidal integration
        prev_density_m = density_m;
        prev_density_r = density_r;
        prev_density_o = density_o;
    }

    vec3 transmittance = exp(-(total_density_r * BETA_E_R + total_density_m * BETA_E_M + total_density_o * BETA_O));

    imageStore(table, ivec2(gl_GlobalInvocationID.xy), vec4(transmittance, 1));
}