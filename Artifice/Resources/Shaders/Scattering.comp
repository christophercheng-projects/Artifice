#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 8


#define R_PLANET 6360e3
#define R_ATMOSPHERE 6440e3
#define SCATTER_STEPS 50
#define H_M 1200
#define H_R 8000

#define BETA_R vec3(5.8e-6, 1.35e-5, 3.31e-5)
#define BETA_E_R BETA_R
#define BETA_M vec3(2e-6)
#define BETA_E_M vec3(1.11 * BETA_M)
#define BETA_O vec3(5.09, 7.635, 0.2545)

#define PI 3.14159265


layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = WORKGROUP_SIZE) in;

layout (set = 0, binding = 0) uniform sampler2D atmosphere_transmittance;
layout (set = 0, binding = 1, rgba16f) uniform writeonly image3D table;


const float infinity = 1. / 0.;


float ray_circle(vec2 start, vec2 dir, float radius, bool nearest)
{
    float c = dot(start, start) - (radius*radius);
    float b = dot(dir, start);
    float d = b*b - c;
    if (d < 0.0) return infinity;
    float t0 = -b - sqrt(d);
    float t1 = -b + sqrt(d);
    float ta = min(t0, t1);
    float tb = max(t0, t1);
    if (tb < 0.0) { return infinity; }
    else if (nearest) { return ta > 0.0 ? ta : tb; }
    else { return tb; }
}

float height_to_coord(float h)
{
    float h_atmosphere = R_ATMOSPHERE - R_PLANET;
    return sqrt(h/h_atmosphere);
}


float cos_view_to_coord(float height, float c_v)
{
    const float c_h = -sqrt(height * (2 * R_PLANET + height)) / (R_PLANET + height);
    if (c_v > c_h) {
        return 0.5 * pow((c_v - c_h) / (1 - c_h), 0.2) + 0.5;
    } else {
        return 0.5 - (0.5 * pow((c_h - c_v) / (c_h + 1), 0.2));
    }
}

float coord_to_height(float x)
{
    float h_atmosphere = R_ATMOSPHERE - R_PLANET;
    return max(x * x * h_atmosphere, 1);
}

float coord_to_cos_view(float height, float y)
{
    const float c_h = -sqrt(height * (2 * R_PLANET + height)) / (R_PLANET + height);
    float result;
    if (y > 0.5) {
        result = c_h + pow(2*y - 1, 5) * (1 - c_h);
    } else {
        result = c_h - pow(2*(0.5 - y), 5) * (1 + c_h);
    }
    return clamp(result, -1, 1);
}

float coord_to_cos_sun(float z)
{
    return clamp(tan((2 * z - 1 + 0.26) * 0.75) / tan(1.26 * 0.75), -1, 1);
}

vec2 cos_view_dir(float cos_view)
{
    // Rotates vec2(1, 0) by view. Integration always begins at a point with zenith vec2(1, 0), so
    // this extracts the correct outgoing ray direction based on the parameterizations around such a
    // starting point.
    return vec2(cos_view, sqrt(1 - cos_view * cos_view));
}

vec2 intersection(vec2 start, vec2 dir)
{
    float t = ray_circle(start, dir, R_PLANET, true);
    if (isinf(t)) { t = ray_circle(start, dir, R_ATMOSPHERE, false); }
    if (isinf(t)) { t = 0; }
    return start + t * dir;
}

void main() {
    float x = gl_GlobalInvocationID.x / float(gl_NumWorkGroups.x * WORKGROUP_SIZE - 1);
    float height = coord_to_height(x);
    float cos_view = coord_to_cos_view(height, gl_GlobalInvocationID.y / float(gl_NumWorkGroups.y * WORKGROUP_SIZE - 1));
    float cos_sun = coord_to_cos_sun(gl_GlobalInvocationID.z / float(gl_NumWorkGroups.z * WORKGROUP_SIZE - 1));

    vec2 p_a = vec2(height + R_PLANET, 0);
    vec2 direction = cos_view_dir(cos_view);
    vec2 sun_direction = cos_view_dir(cos_sun);
    vec2 p_b = intersection(p_a, direction);
    float dx = distance(p_a, p_b) / SCATTER_STEPS;
    float prev_density_m = 0;
    float prev_density_r = 0;
    float prev_density_o = 0;
    float total_density_m = 0;
    float total_density_r = 0;
    float total_density_o = 0;
    float prev_in_m = 0;
    vec3 prev_in_r = vec3(0);
    float total_in_m = 0;
    vec3 total_in_r = vec3(0);
    for (int step = 0; step < SCATTER_STEPS; ++step) {
        vec2 p_x = p_a + dx * step * direction;
        vec2 zenith = normalize(p_x);
        // h is altitude
        float h = length(p_x) - R_PLANET;

        float d_m = exp(-h/H_M);
        float d_r = exp(-h/H_R);
        float d_o = 6e-7 * d_r;;
        total_density_m += dx * (d_m + prev_density_m) / 2;
        total_density_r += dx * (d_r + prev_density_r) / 2;
        total_density_o += dx * (d_o + prev_density_o) / 2;
        prev_density_m = d_m;
        prev_density_r = d_r;
        prev_density_o = d_o;

        vec3 transmittance = exp(-(total_density_r * BETA_E_R + total_density_m * BETA_E_M + total_density_o * BETA_O)) * texture(atmosphere_transmittance, vec2(height_to_coord(h), cos_view_to_coord(h, dot(sun_direction, zenith)))).rgb;

        float in_m = d_m * transmittance.r;
        vec3 in_r = d_r * transmittance;
        total_in_m += (in_m + prev_in_m) / 2 * dx;
        total_in_r += (in_r + prev_in_r) / 2 * dx;
        prev_in_m = in_m;
        prev_in_r = in_r;
    }
    total_in_m *= BETA_M.r / (4 * PI);
    total_in_r *= BETA_R / (4 * PI);
    ivec3 coords = ivec3(gl_GlobalInvocationID.xyz);
    vec4 value = vec4(total_in_r, total_in_m);
    imageStore(table, coords, value);
}