#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer StorageBuffer
{
    int Size;
    float Pixels[];
} u_Digits;
layout(set = 0, binding = 1, rgba16f) restrict writeonly uniform image2D o_Color;

layout(push_constant) uniform PushConstants 
{
    vec4 Color;
    vec2 LastMousePosition;
    vec2 CurrentMousePosition;
    float Size;
    bool Clear;
} pc;


void main()
{
    if (pc.Clear)
    {
        imageStore(o_Color, ivec2(gl_GlobalInvocationID), vec4(0.0, 0.0, 0.0, 1.0));
        return;
    }

    vec2 a = pc.CurrentMousePosition;
    vec2 b = pc.LastMousePosition;
    float d;

    if (a == b)
    {
        d = (a.x - gl_GlobalInvocationID.x) * (a.x - gl_GlobalInvocationID.x) + (a.y - gl_GlobalInvocationID.y) * (a.y - gl_GlobalInvocationID.y);
    }
    else
    {
        vec2 c = gl_GlobalInvocationID.xy;
        vec2 line = b - a;
        float l2 = line.x * line.x + line.y * line.y;
        float t = max(0, min(1, dot(c - a, b - a) / l2));
        vec2 projection = a + t * (b - a);
        d = (projection.x - c.x) * (projection.x - c.x) + (projection.y - c.y) * (projection.y - c.y);
    }


    if (d < pc.Size * pc.Size)
    {
        imageStore(o_Color, ivec2(gl_GlobalInvocationID), pc.Color);
        return;
    }

    return;

    
#if 0
    ivec2 coords = ivec2(gl_GlobalInvocationID);
    ivec2 mouse = ivec2(pc.CurrentMousePosition);
    int a = coords.x - mouse.x;
    int b = coords.y - mouse.y;
    if (a * a + b * b < 64.0)
    {
        imageStore(o_Color, ivec2(gl_GlobalInvocationID), vec4(1.0, 0.0, 0.0, 1.0));
        return;
    }

    return;

    int base = coords.x + u_Digits.Size * coords.y;
    vec4 color = vec4(u_Digits.Pixels[base], u_Digits.Pixels[base + 1], u_Digits.Pixels[base + 2], 1.0);
    
    imageStore(o_Color, ivec2(gl_GlobalInvocationID), color);
    #endif
}