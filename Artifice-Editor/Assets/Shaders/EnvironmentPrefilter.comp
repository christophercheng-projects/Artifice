#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 16

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform samplerCube u_EnvironmentMap;
layout(set = 1, binding = 0, rgba16f) restrict writeonly uniform imageCube o_FilteredMap;

layout(push_constant) uniform PushConstant
{
	float Roughness;
} pc;

const float PI = 3.14159265359;

float VanDerCorput(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i) / float(N), VanDerCorput(i));
}

vec3 ImportanceSampleGGX(vec2 X, vec3 N, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;

    float phi = 2 * PI * X.x;
    float cosTheta = sqrt((1.0 - X.y) / (1.0 + (a2 - 1.0) * X.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    vec3 H;
    H.x = sinTheta * cos(phi);
    H.y = sinTheta * sin(phi);
    H.z = cosTheta;

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 binormal = cross(N, tangent);

    vec3 sampleVec = H.x * tangent + H.y * binormal + H.z * N;
    return sampleVec;
}

float NDF_GGX(float NdotH, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH2 = clamp(NdotH * NdotH, 0.0, 1.0);

    float num = a2;
    float denom = NdotH2 * (a2 - 1.0) + 1.0;
    denom = PI * denom * denom;

    return num / max(denom, 0.0000001);
}

vec3 GetCubeMapTexCoords()
{
	vec2 st = gl_GlobalInvocationID.xy / vec2(imageSize(o_FilteredMap));
    vec2 uv = 2.0 * vec2(st.x, 1.0 - st.y) - vec2(1.0);

	vec3 ret;
	if (gl_GlobalInvocationID.z == 0)		ret = vec3(  1.0, uv.y, -uv.x);
	else if (gl_GlobalInvocationID.z == 1)	ret = vec3( -1.0, uv.y,  uv.x);
	else if (gl_GlobalInvocationID.z == 2)	ret = vec3( uv.x,  1.0, -uv.y);
	else if (gl_GlobalInvocationID.z == 3)	ret = vec3( uv.x, -1.0,  uv.y);
	else if (gl_GlobalInvocationID.z == 4)	ret = vec3( uv.x, uv.y,   1.0);
	else if (gl_GlobalInvocationID.z == 5)	ret = vec3(-uv.x, uv.y,  -1.0);

	return ret;
}

void main()
{
    const vec2 OUTPUT_SIZE = vec2(imageSize(o_FilteredMap));
    if (gl_GlobalInvocationID.x >= OUTPUT_SIZE.x || gl_GlobalInvocationID.y >= OUTPUT_SIZE.y)
        return;

    const vec2 INPUT_SIZE = vec2(textureSize(u_EnvironmentMap, 0));
    const float W_t = (4.0 * PI) / (6.0 * INPUT_SIZE.x * INPUT_SIZE.y);

    const uint NUM_SAMPLES = 1024u;
    const float INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);

    vec3 N = normalize(GetCubeMapTexCoords());
    vec3 V = N;

    float totalWeight = 0.0;
    vec3 color = vec3(0.0);
    for (uint i = 0u; i < NUM_SAMPLES; i++)
    {
        vec2 X_i = Hammersley(i, NUM_SAMPLES);
        vec3 H = ImportanceSampleGGX(X_i, N, pc.Roughness);
        vec3 L = normalize(2.0 * dot(H, V) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)
        {
            float NdotH = max(dot(N, H), 0.0);
            
            float pdf = NDF_GGX(NdotH, pc.Roughness) * 0.25;

            float w_s = INV_NUM_SAMPLES / max(pdf, 0.001);
            float mipLevel = max(0.5 * log2(w_s / W_t) + 1.0, 0.0);
            
            color += textureLod(u_EnvironmentMap, L, mipLevel).rgb * NdotL;
            totalWeight += NdotL;
        }
    }
    color /= totalWeight;

    imageStore(o_FilteredMap, ivec3(gl_GlobalInvocationID), vec4(color, 1.0));
}