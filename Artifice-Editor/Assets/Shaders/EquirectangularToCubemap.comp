#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 16

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout (set = 0, binding = 0) uniform sampler2D u_EquirectangularMap;
layout (set = 0, binding = 1, rgba16f) uniform writeonly imageCube o_CubeMap;

const float PI = 3.1415926536;

vec3 GetCubeMapTexCoords()
{
	vec2 st = gl_GlobalInvocationID.xy / vec2(imageSize(o_CubeMap));
	vec2 uv = 2.0 * st - vec2(1.0);

	vec3 ret;
	if (gl_GlobalInvocationID.z == 0)		ret = vec3(  1.0, -uv.y, -uv.x);
	else if (gl_GlobalInvocationID.z == 1)	ret = vec3( -1.0, -uv.y,  uv.x);
	else if (gl_GlobalInvocationID.z == 2)	ret = vec3( uv.x,   1.0,  uv.y);
	else if (gl_GlobalInvocationID.z == 3)	ret = vec3( uv.x,  -1.0, -uv.y);
	else if (gl_GlobalInvocationID.z == 4)	ret = vec3( uv.x, -uv.y,   1.0);
	else if (gl_GlobalInvocationID.z == 5)	ret = vec3(-uv.x, -uv.y,  -1.0);

	return ret;
}

void main()
{
	vec3 tex_coords = normalize(GetCubeMapTexCoords());

	float phi = atan(tex_coords.z, tex_coords.x);
	float theta = acos(tex_coords.y);
	vec2 uv = vec2(phi / (2.0 * PI) + 0.5, theta / PI);

	vec4 color = texture(u_EquirectangularMap, uv);
	imageStore(o_CubeMap, ivec3(gl_GlobalInvocationID), color);
}