#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 32

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) restrict writeonly uniform image2D o_BRDFLUT;


const float PI = 3.14159265359;
const float Epsilon = 0.001;


float VanDerCorput(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10;
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i) / float(N), VanDerCorput(i));
}

vec3 ImportanceSampleGGX(vec2 X, vec3 N, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;

    float phi = 2.0 * PI * X.x;
    float cosTheta = sqrt((1.0 - X.y) / (1.0 + (a2 - 1.0) * X.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    vec3 H;
    H.x = sinTheta * cos(phi);
    H.y = sinTheta * sin(phi);
    H.z = cosTheta;

    vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent = normalize(cross(up, N));
    vec3 binormal = cross(N, tangent);

    vec3 sampleVec = H.x * tangent + H.y * binormal + H.z * N;
    return sampleVec;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    // note that we use a different k for IBL
    float a = roughness;
    float k = (a * a) / 2.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec2 GetTexCoords()
{
	float x = gl_GlobalInvocationID.x;
    float y = gl_GlobalInvocationID.y;
    return vec2(x, y) / vec2(imageSize(o_BRDFLUT));
}

void main()
{
    vec2 tex_coords = GetTexCoords();

    const uint NUM_SAMPLES = 1024u;
    const float INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);

    float NdotV = max(tex_coords.x, Epsilon);
    float roughness = tex_coords.y;
    
    vec3 V = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);
    vec3 N = vec3(0.0, 0.0, 1.0);

    float A = 0.0;
    float B = 0.0;
    for (uint i = 0u; i < NUM_SAMPLES; i++)
    {
        vec2 X_i = Hammersley(i, NUM_SAMPLES);
        vec3 H = ImportanceSampleGGX(X_i, N, roughness);
        vec3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        if (NdotL > 0.0)
        {
            float NdotH = max(H.z, 0.0);
            float VdotH = max(dot(V, H), 0.0);

            float G = GeometrySmith(N, V, L, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis; 
        }
    }
    A /= float(NUM_SAMPLES);
    B /= float(NUM_SAMPLES);

    imageStore(o_BRDFLUT, ivec2(gl_GlobalInvocationID), vec4(A, B, 0.0, 0.0));
}